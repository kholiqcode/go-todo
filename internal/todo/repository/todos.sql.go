// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: todos.sql

package querier

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :execresult
INSERT INTO todos (activity_group_id, title, is_active, priority)
VALUES (?, ?, ?, ?)
`

type CreateTodoParams struct {
	ActivityGroupID int32         `json:"activity_group_id"`
	Title           string        `json:"title"`
	IsActive        bool          `json:"is_active"`
	Priority        TodosPriority `json:"priority"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTodo,
		arg.ActivityGroupID,
		arg.Title,
		arg.IsActive,
		arg.Priority,
	)
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, activity_group_id, title, is_active, priority, created_at, updated_at FROM todos
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.ActivityGroupID,
		&i.Title,
		&i.IsActive,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, activity_group_id, title, is_active, priority, created_at, updated_at FROM todos WHERE 
CASE 
WHEN ? = 'activity_group_id' THEN activity_group_id 
ELSE title END =
CASE
WHEN ? = '' THEN ''
ELSE ? END
ORDER BY 
CASE WHEN ? = 'title' THEN title END ASC,
CASE WHEN ? = '-title' THEN title END DESC,
CASE WHEN ? = 'is_active' THEN is_active END ASC,
CASE WHEN ? = '-is_active' THEN is_active END DESC,
CASE WHEN ? = 'createdAt' THEN created_at END ASC,
CASE WHEN ? = '-createdAt' THEN created_at END DESC, 
CASE WHEN ? = '' THEN activity_group_id END ASC
LIMIT ? OFFSET ?
`

type ListTodosParams struct {
	SearchField interface{} `json:"search_field"`
	SearchValue int32       `json:"search_value"`
	SortBy      interface{} `json:"sort_by"`
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos,
		arg.SearchField,
		arg.SearchField,
		arg.SearchValue,
		arg.SortBy,
		arg.SortBy,
		arg.SortBy,
		arg.SortBy,
		arg.SortBy,
		arg.SortBy,
		arg.SortBy,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.ActivityGroupID,
			&i.Title,
			&i.IsActive,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET title = ?, is_active = ?
WHERE id = ?
`

type UpdateTodoParams struct {
	Title    string `json:"title"`
	IsActive bool   `json:"is_active"`
	ID       int32  `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo, arg.Title, arg.IsActive, arg.ID)
	return err
}
